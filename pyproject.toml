[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vision-agent"
version = "0.1.0"
description = "Universal Computer Vision Accessibility Agent"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Vision Agent Team", email = "team@visionagent.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "pydantic>=2.5.0",
    "opencv-python>=4.8.1.78",
    "Pillow>=10.1.0",
    "mss>=9.0.1",
    "openai>=1.3.8",
    "PyQt6>=6.6.1",
    "pyttsx3>=2.90",
    "pynput>=1.7.6",
    "redis>=5.0.1",
    "cryptography>=41.0.8",
    "PyYAML>=6.0.1",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
]
local-llm = [
    "torch>=2.1.1",
    "transformers>=4.36.2",
    "accelerate>=0.25.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
]

[project.scripts]
vision-agent-server = "server.main:main"
vision-agent-client = "desktop_agent.main:main"

[project.urls]
Homepage = "https://github.com/visionagent/SeriousVisionAiAgent"
Repository = "https://github.com/visionagent/SeriousVisionAiAgent"
Issues = "https://github.com/visionagent/SeriousVisionAiAgent/issues"

[tool.setuptools.packages.find]
include = ["desktop_agent*", "server*", "shared*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["desktop_agent", "server", "shared"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mss.*",
    "pyttsx3.*",
    "pynput.*",
    "cv2.*",
    "louis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=desktop_agent",
    "--cov=server",
    "--cov=shared",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
branch = true
source = ["desktop_agent", "server", "shared"]

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]